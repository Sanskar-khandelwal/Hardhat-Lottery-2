{
  "address": "0xfb239BD3FE0e4a02ad30a6587576421b75e06d61",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "vrfCoordinatorV2",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "entranceFee",
          "type": "uint256"
        },
        {
          "internalType": "bytes32",
          "name": "gasLane",
          "type": "bytes32"
        },
        {
          "internalType": "uint64",
          "name": "subscriptionId",
          "type": "uint64"
        },
        {
          "internalType": "uint32",
          "name": "callbackGasLimit",
          "type": "uint32"
        },
        {
          "internalType": "uint32",
          "name": "interval",
          "type": "uint32"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "have",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "want",
          "type": "address"
        }
      ],
      "name": "OnlyCoordinatorCanFulfill",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Raffle__NotEnoughEthEntered",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Raffle__NotOpen",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "currentBalance",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "numPlayers",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "raffleState",
          "type": "uint256"
        }
      ],
      "name": "Raffle__UpkeepNotNeeded",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Raffle__transferFailed",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "player",
          "type": "address"
        }
      ],
      "name": "RaffleEnter",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "requestId",
          "type": "uint256"
        }
      ],
      "name": "RequestedRaffleWinner",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "picked",
          "type": "address"
        }
      ],
      "name": "WinnerPicked",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "checkUpkeep",
      "outputs": [
        {
          "internalType": "bool",
          "name": "upkeepNeeded",
          "type": "bool"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "enterRaffle",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getEntraceFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getInterval",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getLatestTimeStamp",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getNumWords",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getNumberOfPlayers",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "getPlayer",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getRaffleState",
      "outputs": [
        {
          "internalType": "enum Raffle.RaffleState",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getRecentWinner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getRequestConfirmations",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getSubscriptionId",
      "outputs": [
        {
          "internalType": "uint64",
          "name": "",
          "type": "uint64"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "performUpkeep",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "requestId",
          "type": "uint256"
        },
        {
          "internalType": "uint256[]",
          "name": "randomWords",
          "type": "uint256[]"
        }
      ],
      "name": "rawFulfillRandomWords",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xe44277fb7e13b34c5b3465a8535e872e3554c65dbeac21b13408de078466a6b3",
  "receipt": {
    "to": null,
    "from": "0x3201971DE54D6B08718416163008DB335F08B6e5",
    "contractAddress": "0xfb239BD3FE0e4a02ad30a6587576421b75e06d61",
    "transactionIndex": 23,
    "gasUsed": "1240250",
    "logsBloom": "0x
    "blockHash": "0x45a8fa20bee1a48b85eb9af83b4310f1c1c3b8e53be4a0b935107c76277aa979",
    "transactionHash": "0xe44277fb7e13b34c5b3465a8535e872e3554c65dbeac21b13408de078466a6b3",
    "logs": [],
    "blockNumber": 5018075,
    "cumulativeGasUsed": "4981590",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x8103B0A8A00be2DDC778e6e7eaa21791Cd364625",
    "10000000000000000",
    "0x474e34a077df58807dbe9c96d3c009b23b3c6d0cce433e59bbf5b34f823bc56c",
    "8300",
    "500000",
    "30"
  ],
  "numDeployments": 1,
  "solcInputHash": "209bcd5b80799a5d8a8fe3cb0d216e13",
  "metadata": "{\"compiler\":{\"version\":\"0.8.8+commit.dddeac2f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"vrfCoordinatorV2\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"entranceFee\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"gasLane\",\"type\":\"bytes32\"},{\"internalType\":\"uint64\",\"name\":\"subscriptionId\",\"type\":\"uint64\"},{\"internalType\":\"uint32\",\"name\":\"callbackGasLimit\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"interval\",\"type\":\"uint32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"have\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"want\",\"type\":\"address\"}],\"name\":\"OnlyCoordinatorCanFulfill\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Raffle__NotEnoughEthEntered\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Raffle__NotOpen\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"currentBalance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"numPlayers\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"raffleState\",\"type\":\"uint256\"}],\"name\":\"Raffle__UpkeepNotNeeded\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Raffle__transferFailed\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"player\",\"type\":\"address\"}],\"name\":\"RaffleEnter\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"}],\"name\":\"RequestedRaffleWinner\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"picked\",\"type\":\"address\"}],\"name\":\"WinnerPicked\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"checkUpkeep\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"upkeepNeeded\",\"type\":\"bool\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"enterRaffle\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getEntraceFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getInterval\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLatestTimeStamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getNumWords\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getNumberOfPlayers\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getPlayer\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRaffleState\",\"outputs\":[{\"internalType\":\"enum Raffle.RaffleState\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRecentWinner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRequestConfirmations\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getSubscriptionId\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"performUpkeep\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"randomWords\",\"type\":\"uint256[]\"}],\"name\":\"rawFulfillRandomWords\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Raffle.sol\":\"Raffle\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/automation/interfaces/AutomationCompatibleInterface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface AutomationCompatibleInterface {\\n  /**\\n   * @notice method that is simulated by the keepers to see if any work actually\\n   * needs to be performed. This method does does not actually need to be\\n   * executable, and since it is only ever simulated it can consume lots of gas.\\n   * @dev To ensure that it is never called, you may want to add the\\n   * cannotExecute modifier from KeeperBase to your implementation of this\\n   * method.\\n   * @param checkData specified in the upkeep registration so it is always the\\n   * same for a registered upkeep. This can easily be broken down into specific\\n   * arguments using `abi.decode`, so multiple upkeeps can be registered on the\\n   * same contract and easily differentiated by the contract.\\n   * @return upkeepNeeded boolean to indicate whether the keeper should call\\n   * performUpkeep or not.\\n   * @return performData bytes that the keeper should call performUpkeep with, if\\n   * upkeep is needed. If you would like to encode data to decode later, try\\n   * `abi.encode`.\\n   */\\n  function checkUpkeep(bytes calldata checkData) external returns (bool upkeepNeeded, bytes memory performData);\\n\\n  /**\\n   * @notice method that is actually executed by the keepers, via the registry.\\n   * The data returned by the checkUpkeep simulation will be passed into\\n   * this method to actually be executed.\\n   * @dev The input to this method should not be trusted, and the caller of the\\n   * method should not even be restricted to any single registry. Anyone should\\n   * be able call it, and the input should be validated, there is no guarantee\\n   * that the data passed in is the performData returned from checkUpkeep. This\\n   * could happen due to malicious keepers, racing keepers, or simply a state\\n   * change while the performUpkeep transaction is waiting for confirmation.\\n   * Always validate the data passed in.\\n   * @param performData is the data which was passed back from the checkData\\n   * simulation. If it is encoded, it can easily be decoded into other types by\\n   * calling `abi.decode`. This data should not be trusted, and should be\\n   * validated against the contract's current state.\\n   */\\n  function performUpkeep(bytes calldata performData) external;\\n}\\n\",\"keccak256\":\"0x67076747c6f66d8d43472a56e72879c350056bff82e069addaf9064922863340\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/automation/interfaces/KeeperCompatibleInterface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n/**\\n * @notice This is a deprecated interface. Please use AutomationCompatibleInterface directly.\\n */\\npragma solidity ^0.8.0;\\nimport {AutomationCompatibleInterface as KeeperCompatibleInterface} from \\\"./AutomationCompatibleInterface.sol\\\";\\n\",\"keccak256\":\"0xac76a31c20c6d66196247376d113a0f19229569ab8c123989649d50be3333e0a\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/interfaces/VRFCoordinatorV2Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface VRFCoordinatorV2Interface {\\n  /**\\n   * @notice Get configuration relevant for making requests\\n   * @return minimumRequestConfirmations global min for request confirmations\\n   * @return maxGasLimit global max for request gas limit\\n   * @return s_provingKeyHashes list of registered key hashes\\n   */\\n  function getRequestConfig() external view returns (uint16, uint32, bytes32[] memory);\\n\\n  /**\\n   * @notice Request a set of random words.\\n   * @param keyHash - Corresponds to a particular oracle job which uses\\n   * that key for generating the VRF proof. Different keyHash's have different gas price\\n   * ceilings, so you can select a specific one to bound your maximum per request cost.\\n   * @param subId  - The ID of the VRF subscription. Must be funded\\n   * with the minimum subscription balance required for the selected keyHash.\\n   * @param minimumRequestConfirmations - How many blocks you'd like the\\n   * oracle to wait before responding to the request. See SECURITY CONSIDERATIONS\\n   * for why you may want to request more. The acceptable range is\\n   * [minimumRequestBlockConfirmations, 200].\\n   * @param callbackGasLimit - How much gas you'd like to receive in your\\n   * fulfillRandomWords callback. Note that gasleft() inside fulfillRandomWords\\n   * may be slightly less than this amount because of gas used calling the function\\n   * (argument decoding etc.), so you may need to request slightly more than you expect\\n   * to have inside fulfillRandomWords. The acceptable range is\\n   * [0, maxGasLimit]\\n   * @param numWords - The number of uint256 random values you'd like to receive\\n   * in your fulfillRandomWords callback. Note these numbers are expanded in a\\n   * secure way by the VRFCoordinator from a single random value supplied by the oracle.\\n   * @return requestId - A unique identifier of the request. Can be used to match\\n   * a request to a response in fulfillRandomWords.\\n   */\\n  function requestRandomWords(\\n    bytes32 keyHash,\\n    uint64 subId,\\n    uint16 minimumRequestConfirmations,\\n    uint32 callbackGasLimit,\\n    uint32 numWords\\n  ) external returns (uint256 requestId);\\n\\n  /**\\n   * @notice Create a VRF subscription.\\n   * @return subId - A unique subscription id.\\n   * @dev You can manage the consumer set dynamically with addConsumer/removeConsumer.\\n   * @dev Note to fund the subscription, use transferAndCall. For example\\n   * @dev  LINKTOKEN.transferAndCall(\\n   * @dev    address(COORDINATOR),\\n   * @dev    amount,\\n   * @dev    abi.encode(subId));\\n   */\\n  function createSubscription() external returns (uint64 subId);\\n\\n  /**\\n   * @notice Get a VRF subscription.\\n   * @param subId - ID of the subscription\\n   * @return balance - LINK balance of the subscription in juels.\\n   * @return reqCount - number of requests for this subscription, determines fee tier.\\n   * @return owner - owner of the subscription.\\n   * @return consumers - list of consumer address which are able to use this subscription.\\n   */\\n  function getSubscription(\\n    uint64 subId\\n  ) external view returns (uint96 balance, uint64 reqCount, address owner, address[] memory consumers);\\n\\n  /**\\n   * @notice Request subscription owner transfer.\\n   * @param subId - ID of the subscription\\n   * @param newOwner - proposed new owner of the subscription\\n   */\\n  function requestSubscriptionOwnerTransfer(uint64 subId, address newOwner) external;\\n\\n  /**\\n   * @notice Request subscription owner transfer.\\n   * @param subId - ID of the subscription\\n   * @dev will revert if original owner of subId has\\n   * not requested that msg.sender become the new owner.\\n   */\\n  function acceptSubscriptionOwnerTransfer(uint64 subId) external;\\n\\n  /**\\n   * @notice Add a consumer to a VRF subscription.\\n   * @param subId - ID of the subscription\\n   * @param consumer - New consumer which can use the subscription\\n   */\\n  function addConsumer(uint64 subId, address consumer) external;\\n\\n  /**\\n   * @notice Remove a consumer from a VRF subscription.\\n   * @param subId - ID of the subscription\\n   * @param consumer - Consumer to remove from the subscription\\n   */\\n  function removeConsumer(uint64 subId, address consumer) external;\\n\\n  /**\\n   * @notice Cancel a subscription\\n   * @param subId - ID of the subscription\\n   * @param to - Where to send the remaining LINK to\\n   */\\n  function cancelSubscription(uint64 subId, address to) external;\\n\\n  /*\\n   * @notice Check to see if there exists a request commitment consumers\\n   * for all consumers and keyhashes for a given sub.\\n   * @param subId - ID of the subscription\\n   * @return true if there exists at least one unfulfilled request for the subscription, false\\n   * otherwise.\\n   */\\n  function pendingRequestExists(uint64 subId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xa9f8b7e09811f4ac9f421116b5d6bcf50b5748025c0cb012aaf5ff7c39a6b46a\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/vrf/VRFConsumerBaseV2.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\n/** ****************************************************************************\\n * @notice Interface for contracts using VRF randomness\\n * *****************************************************************************\\n * @dev PURPOSE\\n *\\n * @dev Reggie the Random Oracle (not his real job) wants to provide randomness\\n * @dev to Vera the verifier in such a way that Vera can be sure he's not\\n * @dev making his output up to suit himself. Reggie provides Vera a public key\\n * @dev to which he knows the secret key. Each time Vera provides a seed to\\n * @dev Reggie, he gives back a value which is computed completely\\n * @dev deterministically from the seed and the secret key.\\n *\\n * @dev Reggie provides a proof by which Vera can verify that the output was\\n * @dev correctly computed once Reggie tells it to her, but without that proof,\\n * @dev the output is indistinguishable to her from a uniform random sample\\n * @dev from the output space.\\n *\\n * @dev The purpose of this contract is to make it easy for unrelated contracts\\n * @dev to talk to Vera the verifier about the work Reggie is doing, to provide\\n * @dev simple access to a verifiable source of randomness. It ensures 2 things:\\n * @dev 1. The fulfillment came from the VRFCoordinator\\n * @dev 2. The consumer contract implements fulfillRandomWords.\\n * *****************************************************************************\\n * @dev USAGE\\n *\\n * @dev Calling contracts must inherit from VRFConsumerBase, and can\\n * @dev initialize VRFConsumerBase's attributes in their constructor as\\n * @dev shown:\\n *\\n * @dev   contract VRFConsumer {\\n * @dev     constructor(<other arguments>, address _vrfCoordinator, address _link)\\n * @dev       VRFConsumerBase(_vrfCoordinator) public {\\n * @dev         <initialization with other arguments goes here>\\n * @dev       }\\n * @dev   }\\n *\\n * @dev The oracle will have given you an ID for the VRF keypair they have\\n * @dev committed to (let's call it keyHash). Create subscription, fund it\\n * @dev and your consumer contract as a consumer of it (see VRFCoordinatorInterface\\n * @dev subscription management functions).\\n * @dev Call requestRandomWords(keyHash, subId, minimumRequestConfirmations,\\n * @dev callbackGasLimit, numWords),\\n * @dev see (VRFCoordinatorInterface for a description of the arguments).\\n *\\n * @dev Once the VRFCoordinator has received and validated the oracle's response\\n * @dev to your request, it will call your contract's fulfillRandomWords method.\\n *\\n * @dev The randomness argument to fulfillRandomWords is a set of random words\\n * @dev generated from your requestId and the blockHash of the request.\\n *\\n * @dev If your contract could have concurrent requests open, you can use the\\n * @dev requestId returned from requestRandomWords to track which response is associated\\n * @dev with which randomness request.\\n * @dev See \\\"SECURITY CONSIDERATIONS\\\" for principles to keep in mind,\\n * @dev if your contract could have multiple requests in flight simultaneously.\\n *\\n * @dev Colliding `requestId`s are cryptographically impossible as long as seeds\\n * @dev differ.\\n *\\n * *****************************************************************************\\n * @dev SECURITY CONSIDERATIONS\\n *\\n * @dev A method with the ability to call your fulfillRandomness method directly\\n * @dev could spoof a VRF response with any random value, so it's critical that\\n * @dev it cannot be directly called by anything other than this base contract\\n * @dev (specifically, by the VRFConsumerBase.rawFulfillRandomness method).\\n *\\n * @dev For your users to trust that your contract's random behavior is free\\n * @dev from malicious interference, it's best if you can write it so that all\\n * @dev behaviors implied by a VRF response are executed *during* your\\n * @dev fulfillRandomness method. If your contract must store the response (or\\n * @dev anything derived from it) and use it later, you must ensure that any\\n * @dev user-significant behavior which depends on that stored value cannot be\\n * @dev manipulated by a subsequent VRF request.\\n *\\n * @dev Similarly, both miners and the VRF oracle itself have some influence\\n * @dev over the order in which VRF responses appear on the blockchain, so if\\n * @dev your contract could have multiple VRF requests in flight simultaneously,\\n * @dev you must ensure that the order in which the VRF responses arrive cannot\\n * @dev be used to manipulate your contract's user-significant behavior.\\n *\\n * @dev Since the block hash of the block which contains the requestRandomness\\n * @dev call is mixed into the input to the VRF *last*, a sufficiently powerful\\n * @dev miner could, in principle, fork the blockchain to evict the block\\n * @dev containing the request, forcing the request to be included in a\\n * @dev different block with a different hash, and therefore a different input\\n * @dev to the VRF. However, such an attack would incur a substantial economic\\n * @dev cost. This cost scales with the number of blocks the VRF oracle waits\\n * @dev until it calls responds to a request. It is for this reason that\\n * @dev that you can signal to an oracle you'd like them to wait longer before\\n * @dev responding to the request (however this is not enforced in the contract\\n * @dev and so remains effective only in the case of unmodified oracle software).\\n */\\nabstract contract VRFConsumerBaseV2 {\\n  error OnlyCoordinatorCanFulfill(address have, address want);\\n  address private immutable vrfCoordinator;\\n\\n  /**\\n   * @param _vrfCoordinator address of VRFCoordinator contract\\n   */\\n  constructor(address _vrfCoordinator) {\\n    vrfCoordinator = _vrfCoordinator;\\n  }\\n\\n  /**\\n   * @notice fulfillRandomness handles the VRF response. Your contract must\\n   * @notice implement it. See \\\"SECURITY CONSIDERATIONS\\\" above for important\\n   * @notice principles to keep in mind when implementing your fulfillRandomness\\n   * @notice method.\\n   *\\n   * @dev VRFConsumerBaseV2 expects its subcontracts to have a method with this\\n   * @dev signature, and will call it once it has verified the proof\\n   * @dev associated with the randomness. (It is triggered via a call to\\n   * @dev rawFulfillRandomness, below.)\\n   *\\n   * @param requestId The Id initially returned by requestRandomness\\n   * @param randomWords the VRF output expanded to the requested number of words\\n   */\\n  function fulfillRandomWords(uint256 requestId, uint256[] memory randomWords) internal virtual;\\n\\n  // rawFulfillRandomness is called by VRFCoordinator when it receives a valid VRF\\n  // proof. rawFulfillRandomness then calls fulfillRandomness, after validating\\n  // the origin of the call\\n  function rawFulfillRandomWords(uint256 requestId, uint256[] memory randomWords) external {\\n    if (msg.sender != vrfCoordinator) {\\n      revert OnlyCoordinatorCanFulfill(msg.sender, vrfCoordinator);\\n    }\\n    fulfillRandomWords(requestId, randomWords);\\n  }\\n}\\n\",\"keccak256\":\"0x3d709a5e0f1f9b8841172b10ba8af785dd51a13eda9fc395723a706e51329904\",\"license\":\"MIT\"},\"contracts/Raffle.sol\":{\"content\":\"// Raffle.sol\\n// Let any one join the lottery\\n// vrf to get a random number\\n// and keepers to get a automatically run it after x duration\\n// winner to get all the money of the lottery\\n\\n//SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.7;\\n\\nerror Raffle__NotEnoughEthEntered();\\nerror Raffle__transferFailed();\\nerror Raffle__NotOpen();\\nerror Raffle__UpkeepNotNeeded(uint256 currentBalance, uint256 numPlayers, uint256 raffleState);\\n\\nimport \\\"@chainlink/contracts/src/v0.8/vrf/VRFConsumerBaseV2.sol\\\";\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/VRFCoordinatorV2Interface.sol\\\";\\nimport \\\"@chainlink/contracts/src/v0.8/automation/interfaces/KeeperCompatibleInterface.sol\\\";\\n\\ncontract Raffle is VRFConsumerBaseV2, KeeperCompatibleInterface {\\n /* Raffle State */\\n enum RaffleState {\\n  OPEN,\\n  CALCULATING\\n }\\n /* State Variables */\\n uint256 private immutable i_entranceFee;\\n address payable[] private s_players;\\n VRFCoordinatorV2Interface private immutable i_vrfCoordinator;\\n uint64 private immutable i_subscriptionId;\\n bytes32 private immutable i_gasLane;\\n uint32 private immutable i_callbackGasLimit;\\n uint16 private constant REQUEST_CONFIRMATIONS = 3;\\n uint32 private constant NUM_WORDS = 1;\\n\\n /* Lottery Variables*/\\n address private s_recentWinner;\\n RaffleState private s_raffleState;\\n uint256 private s_lastTimeStamp;\\n uint32 private immutable i_interval;\\n\\n /*Events */\\n event RaffleEnter(address indexed player);\\n event RequestedRaffleWinner(uint256 indexed requestId);\\n event WinnerPicked(address indexed picked);\\n\\n /*Constructor */\\n //vrfcoordinatorV2 is the address of the contract that does the random number verification\\n constructor(\\n  address vrfCoordinatorV2,\\n  uint256 entranceFee,\\n  bytes32 gasLane,\\n  uint64 subscriptionId,\\n  uint32 callbackGasLimit,\\n  uint32 interval\\n ) VRFConsumerBaseV2(vrfCoordinatorV2) {\\n  i_entranceFee = entranceFee;\\n  i_vrfCoordinator = VRFCoordinatorV2Interface(vrfCoordinatorV2);\\n  i_gasLane = gasLane;\\n  i_subscriptionId = subscriptionId;\\n  i_callbackGasLimit = callbackGasLimit;\\n  s_raffleState = RaffleState.OPEN;\\n  s_lastTimeStamp = block.timestamp;\\n  i_interval = interval;\\n }\\n\\n function enterRaffle() public payable {\\n  if (msg.value < i_entranceFee) {\\n   revert Raffle__NotEnoughEthEntered();\\n  }\\n\\n  if (s_raffleState != RaffleState.OPEN) {\\n   revert Raffle__NotOpen();\\n  }\\n\\n  s_players.push(payable(msg.sender));\\n  emit RaffleEnter(msg.sender);\\n }\\n\\n function checkUpkeep(\\n  bytes memory /* checkData */\\n ) public override returns (bool upkeepNeeded, bytes memory /*perform Data */) {\\n  bool isOpen = (RaffleState.OPEN == s_raffleState);\\n  bool timePassed = ((block.timestamp - s_lastTimeStamp) > i_interval);\\n  bool hasPlayers = (s_players.length > 0);\\n  bool hasBalance = address(this).balance > 0;\\n  upkeepNeeded = (isOpen && timePassed && hasPlayers && hasBalance);\\n }\\n\\n // this function will be run by chainlink keepers\\n function performUpkeep(bytes calldata /* performData */) external override {\\n  (bool upkeepNeeded, ) = checkUpkeep(\\\"\\\");\\n  if (!upkeepNeeded)\\n   revert Raffle__UpkeepNotNeeded(address(this).balance, s_players.length, uint256(s_raffleState));\\n  s_raffleState = RaffleState.CALCULATING;\\n  uint256 requestId = i_vrfCoordinator.requestRandomWords(\\n   i_gasLane,\\n   i_subscriptionId,\\n   REQUEST_CONFIRMATIONS,\\n   i_callbackGasLimit,\\n   NUM_WORDS\\n  );\\n  emit RequestedRaffleWinner(requestId);\\n }\\n\\n function fulfillRandomWords(\\n  uint256 /* requestId */,\\n  uint256[] memory randomWords\\n ) internal override {\\n  uint256 indexOfWinner = randomWords[0] % s_players.length;\\n  address payable recentWinner = s_players[indexOfWinner];\\n  s_recentWinner = recentWinner;\\n  s_players = new address payable[](0);\\n  (bool success, ) = recentWinner.call{value: address(this).balance}(\\\"\\\");\\n  if (!success) {\\n   revert Raffle__transferFailed();\\n  }\\n  s_raffleState = RaffleState.OPEN;\\n  emit WinnerPicked(recentWinner);\\n }\\n\\n // view functions\\n function getEntraceFee() public view returns (uint256) {\\n  return i_entranceFee;\\n }\\n\\n function getPlayer(uint256 index) public view returns (address) {\\n  return s_players[index];\\n }\\n\\n function getRecentWinner() public view returns (address) {\\n  return s_recentWinner;\\n }\\n\\n function getRaffleState() public view returns (RaffleState) {\\n  return s_raffleState;\\n }\\n\\n function getNumWords() public pure returns (uint256) {\\n  return NUM_WORDS;\\n }\\n\\n function getNumberOfPlayers() public view returns (uint256) {\\n  return s_players.length;\\n }\\n\\n function getLatestTimeStamp() public view returns (uint256) {\\n  return s_lastTimeStamp;\\n }\\n\\n function getRequestConfirmations() public pure returns (uint256) {\\n  return REQUEST_CONFIRMATIONS;\\n }\\n\\n function getInterval() public view returns (uint256) {\\n  return i_interval;\\n }\\n\\n function getSubscriptionId() public view returns (uint64) {\\n  return i_subscriptionId;\\n }\\n}\\n\",\"keccak256\":\"0xe055c131882d3d51cb78e1493b6ba5a518361c559b6358c181d35c46a9aae4f0\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x6101606040523480156200001257600080fd5b50604051620018d9380380620018d98339818101604052810190620000389190620002af565b858073ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff1660601b81525050508460a081815250508573ffffffffffffffffffffffffffffffffffffffff1660c08173ffffffffffffffffffffffffffffffffffffffff1660601b815250508361010081815250508267ffffffffffffffff1660e08167ffffffffffffffff1660c01b815250508163ffffffff166101208163ffffffff1660e01b815250506000600160146101000a81548160ff021916908360018111156200011957620001186200034b565b5b0217905550426002819055508063ffffffff166101408163ffffffff1660e01b815250505050505050506200037a565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006200017b826200014e565b9050919050565b6200018d816200016e565b81146200019957600080fd5b50565b600081519050620001ad8162000182565b92915050565b6000819050919050565b620001c881620001b3565b8114620001d457600080fd5b50565b600081519050620001e881620001bd565b92915050565b6000819050919050565b6200020381620001ee565b81146200020f57600080fd5b50565b6000815190506200022381620001f8565b92915050565b600067ffffffffffffffff82169050919050565b620002488162000229565b81146200025457600080fd5b50565b60008151905062000268816200023d565b92915050565b600063ffffffff82169050919050565b62000289816200026e565b81146200029557600080fd5b50565b600081519050620002a9816200027e565b92915050565b60008060008060008060c08789031215620002cf57620002ce62000149565b5b6000620002df89828a016200019c565b9650506020620002f289828a01620001d7565b95505060406200030589828a0162000212565b94505060606200031889828a0162000257565b93505060806200032b89828a0162000298565b92505060a06200033e89828a0162000298565b9150509295509295509295565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b60805160601c60a05160c05160601c60e05160c01c610100516101205160e01c6101405160e01c6114d962000400600039600081816108140152610888015260006106c30152600061067f0152600081816106a001526108de0152600061064301526000818161041501526108b601526000818161035501526103a901526114d96000f3fe6080604052600436106100dd5760003560e01c80635f1b0fd81161007f578063ce147cf311610059578063ce147cf31461027e578063de3d9fb7146102a9578063e55ae4e8146102d4578063fd6673f514610311576100dd565b80635f1b0fd8146101ea5780636e04ff0d1461021557806391ad27b414610253576100dd565b8063320229eb116100bb578063320229eb146101405780634585e33b1461016b578063473f1ddc1461019457806353a2c19a146101bf576100dd565b8063115cbaf5146100e25780631fe543e31461010d5780632cfcc53914610136575b600080fd5b3480156100ee57600080fd5b506100f761033c565b6040516101049190610c9d565b60405180910390f35b34801561011957600080fd5b50610134600480360381019061012f9190610e5b565b610353565b005b61013e610413565b005b34801561014c57600080fd5b50610155610582565b6040516101629190610ec6565b60405180910390f35b34801561017757600080fd5b50610192600480360381019061018d9190610f3c565b61058c565b005b3480156101a057600080fd5b506101a961078b565b6040516101b69190610fca565b60405180910390f35b3480156101cb57600080fd5b506101d46107b5565b6040516101e19190610ec6565b60405180910390f35b3480156101f657600080fd5b506101ff6107c4565b60405161020c9190610ec6565b60405180910390f35b34801561022157600080fd5b5061023c6004803603810190610237919061109a565b6107d1565b60405161024a929190611186565b60405180910390f35b34801561025f57600080fd5b50610268610884565b6040516102759190610ec6565b60405180910390f35b34801561028a57600080fd5b506102936108b2565b6040516102a09190610ec6565b60405180910390f35b3480156102b557600080fd5b506102be6108da565b6040516102cb91906111d9565b60405180910390f35b3480156102e057600080fd5b506102fb60048036038101906102f691906111f4565b610902565b6040516103089190610fca565b60405180910390f35b34801561031d57600080fd5b50610326610949565b6040516103339190610ec6565b60405180910390f35b6000600160149054906101000a900460ff16905090565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461040557337f00000000000000000000000000000000000000000000000000000000000000006040517f1cf993f40000000000000000000000000000000000000000000000000000000081526004016103fc929190611221565b60405180910390fd5b61040f8282610955565b5050565b7f000000000000000000000000000000000000000000000000000000000000000034101561046d576040517f066d781f00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000600181111561048157610480610c26565b5b600160149054906101000a900460ff1660018111156104a3576104a2610c26565b5b146104da576040517f1425571c00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055503373ffffffffffffffffffffffffffffffffffffffff167f0805e1d667bddb8a95f0f09880cf94f403fb596ce79928d9f29b74203ba284d460405160405180910390a2565b6000600254905090565b60006105a6604051806020016040528060008152506107d1565b509050806106155747600080549050600160149054906101000a900460ff1660018111156105d7576105d6610c26565b5b6040517f584327aa00000000000000000000000000000000000000000000000000000000815260040161060c9392919061124a565b60405180910390fd5b60018060146101000a81548160ff0219169083600181111561063a57610639610c26565b5b021790555060007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16635d3b1d307f00000000000000000000000000000000000000000000000000000000000000007f000000000000000000000000000000000000000000000000000000000000000060037f000000000000000000000000000000000000000000000000000000000000000060016040518663ffffffff1660e01b81526004016107049594939291906112d6565b602060405180830381600087803b15801561071e57600080fd5b505af1158015610732573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610756919061133e565b9050807fcd6e45c8998311cab7e9d4385596cac867e20a0587194b954fa3a731c93ce78b60405160405180910390a250505050565b6000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6000600163ffffffff16905090565b6000600361ffff16905090565b600060606000600160149054906101000a900460ff1660018111156107f9576107f8610c26565b5b6000600181111561080d5761080c610c26565b5b14905060007f000000000000000000000000000000000000000000000000000000000000000063ffffffff1660025442610847919061139a565b119050600080600080549050119050600080471190508380156108675750825b80156108705750815b80156108795750805b955050505050915091565b60007f000000000000000000000000000000000000000000000000000000000000000063ffffffff16905090565b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b6000808281548110610917576109166113ce565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b60008080549050905090565b60008080549050826000815181106109705761096f6113ce565b5b6020026020010151610982919061142c565b90506000808281548110610999576109986113ce565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905080600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600067ffffffffffffffff811115610a2257610a21610d18565b5b604051908082528060200260200182016040528015610a505781602001602082028036833780820191505090505b5060009080519060200190610a66929190610b7f565b5060008173ffffffffffffffffffffffffffffffffffffffff1647604051610a8d9061148e565b60006040518083038185875af1925050503d8060008114610aca576040519150601f19603f3d011682016040523d82523d6000602084013e610acf565b606091505b5050905080610b0a576040517f9594d81300000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000600160146101000a81548160ff02191690836001811115610b3057610b2f610c26565b5b02179055508173ffffffffffffffffffffffffffffffffffffffff167f5b690ec4a06fe979403046eaeea5b3ce38524683c3001f662c8b5a829632f7df60405160405180910390a25050505050565b828054828255906000526020600020908101928215610bf8579160200282015b82811115610bf75782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555091602001919060010190610b9f565b5b509050610c059190610c09565b5090565b5b80821115610c22576000816000905550600101610c0a565b5090565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b60028110610c6657610c65610c26565b5b50565b6000819050610c7782610c55565b919050565b6000610c8782610c69565b9050919050565b610c9781610c7c565b82525050565b6000602082019050610cb26000830184610c8e565b92915050565b6000604051905090565b600080fd5b600080fd5b6000819050919050565b610cdf81610ccc565b8114610cea57600080fd5b50565b600081359050610cfc81610cd6565b92915050565b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b610d5082610d07565b810181811067ffffffffffffffff82111715610d6f57610d6e610d18565b5b80604052505050565b6000610d82610cb8565b9050610d8e8282610d47565b919050565b600067ffffffffffffffff821115610dae57610dad610d18565b5b602082029050602081019050919050565b600080fd5b6000610dd7610dd284610d93565b610d78565b90508083825260208201905060208402830185811115610dfa57610df9610dbf565b5b835b81811015610e235780610e0f8882610ced565b845260208401935050602081019050610dfc565b5050509392505050565b600082601f830112610e4257610e41610d02565b5b8135610e52848260208601610dc4565b91505092915050565b60008060408385031215610e7257610e71610cc2565b5b6000610e8085828601610ced565b925050602083013567ffffffffffffffff811115610ea157610ea0610cc7565b5b610ead85828601610e2d565b9150509250929050565b610ec081610ccc565b82525050565b6000602082019050610edb6000830184610eb7565b92915050565b600080fd5b60008083601f840112610efc57610efb610d02565b5b8235905067ffffffffffffffff811115610f1957610f18610ee1565b5b602083019150836001820283011115610f3557610f34610dbf565b5b9250929050565b60008060208385031215610f5357610f52610cc2565b5b600083013567ffffffffffffffff811115610f7157610f70610cc7565b5b610f7d85828601610ee6565b92509250509250929050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610fb482610f89565b9050919050565b610fc481610fa9565b82525050565b6000602082019050610fdf6000830184610fbb565b92915050565b600080fd5b600067ffffffffffffffff82111561100557611004610d18565b5b61100e82610d07565b9050602081019050919050565b82818337600083830152505050565b600061103d61103884610fea565b610d78565b90508281526020810184848401111561105957611058610fe5565b5b61106484828561101b565b509392505050565b600082601f83011261108157611080610d02565b5b813561109184826020860161102a565b91505092915050565b6000602082840312156110b0576110af610cc2565b5b600082013567ffffffffffffffff8111156110ce576110cd610cc7565b5b6110da8482850161106c565b91505092915050565b60008115159050919050565b6110f8816110e3565b82525050565b600081519050919050565b600082825260208201905092915050565b60005b8381101561113857808201518184015260208101905061111d565b83811115611147576000848401525b50505050565b6000611158826110fe565b6111628185611109565b935061117281856020860161111a565b61117b81610d07565b840191505092915050565b600060408201905061119b60008301856110ef565b81810360208301526111ad818461114d565b90509392505050565b600067ffffffffffffffff82169050919050565b6111d3816111b6565b82525050565b60006020820190506111ee60008301846111ca565b92915050565b60006020828403121561120a57611209610cc2565b5b600061121884828501610ced565b91505092915050565b60006040820190506112366000830185610fbb565b6112436020830184610fbb565b9392505050565b600060608201905061125f6000830186610eb7565b61126c6020830185610eb7565b6112796040830184610eb7565b949350505050565b6000819050919050565b61129481611281565b82525050565b600061ffff82169050919050565b6112b18161129a565b82525050565b600063ffffffff82169050919050565b6112d0816112b7565b82525050565b600060a0820190506112eb600083018861128b565b6112f860208301876111ca565b61130560408301866112a8565b61131260608301856112c7565b61131f60808301846112c7565b9695505050505050565b60008151905061133881610cd6565b92915050565b60006020828403121561135457611353610cc2565b5b600061136284828501611329565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60006113a582610ccc565b91506113b083610ccc565b9250828210156113c3576113c261136b565b5b828203905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b600061143782610ccc565b915061144283610ccc565b925082611452576114516113fd565b5b828206905092915050565b600081905092915050565b50565b600061147860008361145d565b915061148382611468565b600082019050919050565b60006114998261146b565b915081905091905056fea2646970667358221220b3e18c8222b7c8b5e067e41be1c1f75e16acb66a59c3a59ca4d5b7dfd1f1d5de64736f6c63430008080033",
  "deployedBytecode": "0x6080604052600436106100dd5760003560e01c80635f1b0fd81161007f578063ce147cf311610059578063ce147cf31461027e578063de3d9fb7146102a9578063e55ae4e8146102d4578063fd6673f514610311576100dd565b80635f1b0fd8146101ea5780636e04ff0d1461021557806391ad27b414610253576100dd565b8063320229eb116100bb578063320229eb146101405780634585e33b1461016b578063473f1ddc1461019457806353a2c19a146101bf576100dd565b8063115cbaf5146100e25780631fe543e31461010d5780632cfcc53914610136575b600080fd5b3480156100ee57600080fd5b506100f761033c565b6040516101049190610c9d565b60405180910390f35b34801561011957600080fd5b50610134600480360381019061012f9190610e5b565b610353565b005b61013e610413565b005b34801561014c57600080fd5b50610155610582565b6040516101629190610ec6565b60405180910390f35b34801561017757600080fd5b50610192600480360381019061018d9190610f3c565b61058c565b005b3480156101a057600080fd5b506101a961078b565b6040516101b69190610fca565b60405180910390f35b3480156101cb57600080fd5b506101d46107b5565b6040516101e19190610ec6565b60405180910390f35b3480156101f657600080fd5b506101ff6107c4565b60405161020c9190610ec6565b60405180910390f35b34801561022157600080fd5b5061023c6004803603810190610237919061109a565b6107d1565b60405161024a929190611186565b60405180910390f35b34801561025f57600080fd5b50610268610884565b6040516102759190610ec6565b60405180910390f35b34801561028a57600080fd5b506102936108b2565b6040516102a09190610ec6565b60405180910390f35b3480156102b557600080fd5b506102be6108da565b6040516102cb91906111d9565b60405180910390f35b3480156102e057600080fd5b506102fb60048036038101906102f691906111f4565b610902565b6040516103089190610fca565b60405180910390f35b34801561031d57600080fd5b50610326610949565b6040516103339190610ec6565b60405180910390f35b6000600160149054906101000a900460ff16905090565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461040557337f00000000000000000000000000000000000000000000000000000000000000006040517f1cf993f40000000000000000000000000000000000000000000000000000000081526004016103fc929190611221565b60405180910390fd5b61040f8282610955565b5050565b7f000000000000000000000000000000000000000000000000000000000000000034101561046d576040517f066d781f00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000600181111561048157610480610c26565b5b600160149054906101000a900460ff1660018111156104a3576104a2610c26565b5b146104da576040517f1425571c00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055503373ffffffffffffffffffffffffffffffffffffffff167f0805e1d667bddb8a95f0f09880cf94f403fb596ce79928d9f29b74203ba284d460405160405180910390a2565b6000600254905090565b60006105a6604051806020016040528060008152506107d1565b509050806106155747600080549050600160149054906101000a900460ff1660018111156105d7576105d6610c26565b5b6040517f584327aa00000000000000000000000000000000000000000000000000000000815260040161060c9392919061124a565b60405180910390fd5b60018060146101000a81548160ff0219169083600181111561063a57610639610c26565b5b021790555060007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16635d3b1d307f00000000000000000000000000000000000000000000000000000000000000007f000000000000000000000000000000000000000000000000000000000000000060037f000000000000000000000000000000000000000000000000000000000000000060016040518663ffffffff1660e01b81526004016107049594939291906112d6565b602060405180830381600087803b15801561071e57600080fd5b505af1158015610732573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610756919061133e565b9050807fcd6e45c8998311cab7e9d4385596cac867e20a0587194b954fa3a731c93ce78b60405160405180910390a250505050565b6000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6000600163ffffffff16905090565b6000600361ffff16905090565b600060606000600160149054906101000a900460ff1660018111156107f9576107f8610c26565b5b6000600181111561080d5761080c610c26565b5b14905060007f000000000000000000000000000000000000000000000000000000000000000063ffffffff1660025442610847919061139a565b119050600080600080549050119050600080471190508380156108675750825b80156108705750815b80156108795750805b955050505050915091565b60007f000000000000000000000000000000000000000000000000000000000000000063ffffffff16905090565b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b6000808281548110610917576109166113ce565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b60008080549050905090565b60008080549050826000815181106109705761096f6113ce565b5b6020026020010151610982919061142c565b90506000808281548110610999576109986113ce565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905080600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600067ffffffffffffffff811115610a2257610a21610d18565b5b604051908082528060200260200182016040528015610a505781602001602082028036833780820191505090505b5060009080519060200190610a66929190610b7f565b5060008173ffffffffffffffffffffffffffffffffffffffff1647604051610a8d9061148e565b60006040518083038185875af1925050503d8060008114610aca576040519150601f19603f3d011682016040523d82523d6000602084013e610acf565b606091505b5050905080610b0a576040517f9594d81300000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000600160146101000a81548160ff02191690836001811115610b3057610b2f610c26565b5b02179055508173ffffffffffffffffffffffffffffffffffffffff167f5b690ec4a06fe979403046eaeea5b3ce38524683c3001f662c8b5a829632f7df60405160405180910390a25050505050565b828054828255906000526020600020908101928215610bf8579160200282015b82811115610bf75782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555091602001919060010190610b9f565b5b509050610c059190610c09565b5090565b5b80821115610c22576000816000905550600101610c0a565b5090565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b60028110610c6657610c65610c26565b5b50565b6000819050610c7782610c55565b919050565b6000610c8782610c69565b9050919050565b610c9781610c7c565b82525050565b6000602082019050610cb26000830184610c8e565b92915050565b6000604051905090565b600080fd5b600080fd5b6000819050919050565b610cdf81610ccc565b8114610cea57600080fd5b50565b600081359050610cfc81610cd6565b92915050565b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b610d5082610d07565b810181811067ffffffffffffffff82111715610d6f57610d6e610d18565b5b80604052505050565b6000610d82610cb8565b9050610d8e8282610d47565b919050565b600067ffffffffffffffff821115610dae57610dad610d18565b5b602082029050602081019050919050565b600080fd5b6000610dd7610dd284610d93565b610d78565b90508083825260208201905060208402830185811115610dfa57610df9610dbf565b5b835b81811015610e235780610e0f8882610ced565b845260208401935050602081019050610dfc565b5050509392505050565b600082601f830112610e4257610e41610d02565b5b8135610e52848260208601610dc4565b91505092915050565b60008060408385031215610e7257610e71610cc2565b5b6000610e8085828601610ced565b925050602083013567ffffffffffffffff811115610ea157610ea0610cc7565b5b610ead85828601610e2d565b9150509250929050565b610ec081610ccc565b82525050565b6000602082019050610edb6000830184610eb7565b92915050565b600080fd5b60008083601f840112610efc57610efb610d02565b5b8235905067ffffffffffffffff811115610f1957610f18610ee1565b5b602083019150836001820283011115610f3557610f34610dbf565b5b9250929050565b60008060208385031215610f5357610f52610cc2565b5b600083013567ffffffffffffffff811115610f7157610f70610cc7565b5b610f7d85828601610ee6565b92509250509250929050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610fb482610f89565b9050919050565b610fc481610fa9565b82525050565b6000602082019050610fdf6000830184610fbb565b92915050565b600080fd5b600067ffffffffffffffff82111561100557611004610d18565b5b61100e82610d07565b9050602081019050919050565b82818337600083830152505050565b600061103d61103884610fea565b610d78565b90508281526020810184848401111561105957611058610fe5565b5b61106484828561101b565b509392505050565b600082601f83011261108157611080610d02565b5b813561109184826020860161102a565b91505092915050565b6000602082840312156110b0576110af610cc2565b5b600082013567ffffffffffffffff8111156110ce576110cd610cc7565b5b6110da8482850161106c565b91505092915050565b60008115159050919050565b6110f8816110e3565b82525050565b600081519050919050565b600082825260208201905092915050565b60005b8381101561113857808201518184015260208101905061111d565b83811115611147576000848401525b50505050565b6000611158826110fe565b6111628185611109565b935061117281856020860161111a565b61117b81610d07565b840191505092915050565b600060408201905061119b60008301856110ef565b81810360208301526111ad818461114d565b90509392505050565b600067ffffffffffffffff82169050919050565b6111d3816111b6565b82525050565b60006020820190506111ee60008301846111ca565b92915050565b60006020828403121561120a57611209610cc2565b5b600061121884828501610ced565b91505092915050565b60006040820190506112366000830185610fbb565b6112436020830184610fbb565b9392505050565b600060608201905061125f6000830186610eb7565b61126c6020830185610eb7565b6112796040830184610eb7565b949350505050565b6000819050919050565b61129481611281565b82525050565b600061ffff82169050919050565b6112b18161129a565b82525050565b600063ffffffff82169050919050565b6112d0816112b7565b82525050565b600060a0820190506112eb600083018861128b565b6112f860208301876111ca565b61130560408301866112a8565b61131260608301856112c7565b61131f60808301846112c7565b9695505050505050565b60008151905061133881610cd6565b92915050565b60006020828403121561135457611353610cc2565b5b600061136284828501611329565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60006113a582610ccc565b91506113b083610ccc565b9250828210156113c3576113c261136b565b5b828203905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b600061143782610ccc565b915061144283610ccc565b925082611452576114516113fd565b5b828206905092915050565b600081905092915050565b50565b600061147860008361145d565b915061148382611468565b600082019050919050565b60006114998261146b565b915081905091905056fea2646970667358221220b3e18c8222b7c8b5e067e41be1c1f75e16acb66a59c3a59ca4d5b7dfd1f1d5de64736f6c63430008080033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 1430,
        "contract": "contracts/Raffle.sol:Raffle",
        "label": "s_players",
        "offset": 0,
        "slot": "0",
        "type": "t_array(t_address_payable)dyn_storage"
      },
      {
        "astId": 1447,
        "contract": "contracts/Raffle.sol:Raffle",
        "label": "s_recentWinner",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 1450,
        "contract": "contracts/Raffle.sol:Raffle",
        "label": "s_raffleState",
        "offset": 20,
        "slot": "1",
        "type": "t_enum(RaffleState)1425"
      },
      {
        "astId": 1452,
        "contract": "contracts/Raffle.sol:Raffle",
        "label": "s_lastTimeStamp",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_address_payable": {
        "encoding": "inplace",
        "label": "address payable",
        "numberOfBytes": "20"
      },
      "t_array(t_address_payable)dyn_storage": {
        "base": "t_address_payable",
        "encoding": "dynamic_array",
        "label": "address payable[]",
        "numberOfBytes": "32"
      },
      "t_enum(RaffleState)1425": {
        "encoding": "inplace",
        "label": "enum Raffle.RaffleState",
        "numberOfBytes": "1"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}